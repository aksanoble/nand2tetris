// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);
    Mux16(a=instruction, b=ALUOut, sel=cInstruction, out=inputRegisterA);
    And(a=instruction[4], b=cInstruction, out=loadD);
    And(a=instruction[3], b=cInstruction, out=writeM);
    Or(a=aInstruction, b=instruction[5], out=loadRegisterA);
    ARegister(in=inputRegisterA, load=loadRegisterA, out=outRegisterA, out[0..14]=addressM);
    DRegister(in=ALUOut, load=loadD, out=aluInputD);
    Mux16(a=outRegisterA, b=inM, sel=instruction[12], out=aluInputA);
    ALU(x=aluInputD, y=aluInputA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, zr=isZero, ng=isNegative);
    Or(a=isZero, b=isNegative, out=isNotPositive);
    Not(in=isNotPositive, out=isPositive);
    Not(in=isNegative, out=isNotNegative);
    Not(in=isZero, out=isNotZero);
    Mux8Way(a=false, b=isPositive, c=isZero, d=isNotNegative, e=isNegative, f=isNotZero, g=isNotPositive, h=true, sel=instruction[0..2], out=outJmp);
    And(a=outJmp, b=cInstruction, out=outJ);
    PC(in=outRegisterA,load=outJ, inc=true,reset=reset, out[0..14]=pc);

}
